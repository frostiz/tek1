#!/usr/bin/python2.7
import sys
from math import *

def display_help():
    print("""USAGE
    ./104intersection opt xp yp zp xv yv zv p

DESCRIPTION
    opt                 surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone
    (xp, yp, zp)        coordinates of a point by which the light ray passes through
    (xv, yv, zv)        coordinates of a vector parallel to the light ray
    p                   parameter: radius of the sphere, radius of the cylinder, or angle formed by the cone and the Z-axis""")

try:
    opt = int(sys.argv[1])    ## Option
    xp = int(sys.argv[2])  ##
    yp = int(sys.argv[3])  ##  Coordonnees d'un point M par ou passe le rayon
    zp = int(sys.argv[4])  ##
    xv = int(sys.argv[5])     ##
    yv = int(sys.argv[6])     ##  Vecteur directeur du rayon
    zv = int(sys.argv[7])     ##
    p = int(sys.argv[8])   ## rayon
    if (p <= 0 and opt == 1):
        sys.exit(84);
    if (p <= 0 and opt == 2):
        sys.exit(84);
except:
    display_help()
    sys.exit(84)
if (len(sys.argv) != 9):
    print "Invalid number of argument"
    sys.exit(84)
def aff_first_line():
    if (opt == 1):
        print "sphere of radius %d"%p
    elif (opt == 2):
        print "cylinder of radius %d"%p
    elif (opt == 3):
        if (p <= 0 or p >= 90):
            sys.exit(84)
        print "cone of %d degree angle"%p
    else:
        print ("Invalid option")
        sys.exit(84)

def aff_second_line():
    print "straight line going through the (%d,%d,%d) point and of direction vector (%d,%d,%d)"%(xp, yp, zp, xv, yv, zv)

def interpret_delta(delta, a, b, c):
    if (delta < 0):
        print "No intersection point."
    elif (delta == 0):
        print "1 intersection point :"
        x1 = float(-b)/(2*float(a))
        print("(%.3f, %.3f, %.3f)"%(xv*x1+xp, yv*x1+yp, zv*x1+zp))
    elif (delta > 0):
        print "2 intersection points :"
        x1 = (float(-b) - float(sqrt(delta)))/(2*float(a))
        x2 = (float(-b) + float(sqrt(delta)))/(2*float(a))
        print("(%.3f, %.3f, %.3f)"%(xv*x2+xp, yv*x2+yp, zv*x2+zp))
        print("(%.3f, %.3f, %.3f)"%(xv*x1+xp, yv*x1+yp, zv*x1+zp))

def calc_abc():
    if (opt == 1):
        a = xv*xv + yv*yv + zv*zv
        b = 2*xv*xp + 2*yv*yp + 2*zv*zp
        c = xp*xp + yp*yp + zp*zp - p*p
    elif (opt == 2):
        a = xv*xv + yv*yv
        b = 2*xv*xp + 2*yv*yp
        c = xp*xp + yp*yp - p*p
    elif (opt == 3):
        rad = radians(p)
        a = xv*xv + yv*yv - (zv*zv * tan(rad)* tan(rad))
        b = 2*xv*xp + 2*yv*yp - 2*zv*zp * tan(rad) * tan(rad)
        c = xp*xp + yp*yp - zp*zp * tan(rad) * tan(rad)
    if (a < 0.00000000001):
        a = round(a, 10)
    delta = b*b - 4*a*c
    #on injecte les coords M dans eq cylidnre pour verifier si > ou < au rayon, et si coef directeur droite = 0 -> parallele au cylindre,  et pas dessus, donc pas de points
    #points infini si : dessus et parallele
    if (opt == 2):
        if ((sqrt(xp*xp + yp*yp) > p and xv == 0 and yv == 0) or (sqrt(xp*xp + yp*yp) < p and xv == 0 and yv == 0)):
            print "No intersection point."
            sys.exit(0)
        if (sqrt(xp*xp + yp*yp) == p and xv == 0 and yv == 0):
            print "There is an infinite number of intersection points."
            sys.exit(0)
    if (a == 0):
        if (b != 0):
            x = -c / b
            if (x == 0):
                print "No intersection point."
                sys.exit(0)
            print "1 intersection point :"
            print("(%.3f, %.3f, %.3f)"%(xv*x+xp, yv*x+yp, zv*x+zp))
            sys.exit(0)
        print "There is an infinite number of intersection points."
        sys.exit(0)
    interpret_delta(delta, a, b, c)

aff_first_line()
aff_second_line()
calc_abc()
